# OASIS_START
# DO NOT EDIT (digest: 78990316922073e9f73a863c21eff3b9)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library dns
"lib/dns.cmxs": use_dns
"lib/base64.cmx": for-pack(Dns)
"lib/hashcons.cmx": for-pack(Dns)
"lib/loader.cmx": for-pack(Dns)
"lib/name.cmx": for-pack(Dns)
"lib/operators.cmx": for-pack(Dns)
"lib/packet.cmx": for-pack(Dns)
"lib/query.cmx": for-pack(Dns)
"lib/RR.cmx": for-pack(Dns)
"lib/trie.cmx": for-pack(Dns)
"lib/zone.cmx": for-pack(Dns)
"lib/zone_lexer.cmx": for-pack(Dns)
"lib/zone_parser.cmx": for-pack(Dns)
"lib/resolvconf.cmx": for-pack(Dns)
"lib/buf.cmx": for-pack(Dns)
"lib/protocol.cmx": for-pack(Dns)
<lib/*.ml{,i}>: package(cstruct)
<lib/*.ml{,i}>: package(cstruct.syntax)
<lib/*.ml{,i}>: package(io-page)
<lib/*.ml{,i}>: package(ipaddr)
<lib/*.ml{,i}>: package(re)
<lib/*.ml{,i}>: package(re.str)
# Library dns-lwt-core
"lwt/dns-lwt-core.cmxs": use_dns-lwt-core
# Library dns-lwt
"lwt/dns-lwt.cmxs": use_dns-lwt
# Executable lwt_server
<lib_test/lwt_server.{native,byte}>: package(cstruct)
<lib_test/lwt_server.{native,byte}>: package(cstruct.lwt)
<lib_test/lwt_server.{native,byte}>: package(cstruct.syntax)
<lib_test/lwt_server.{native,byte}>: package(io-page)
<lib_test/lwt_server.{native,byte}>: package(io-page.unix)
<lib_test/lwt_server.{native,byte}>: package(ipaddr)
<lib_test/lwt_server.{native,byte}>: package(ipaddr.unix)
<lib_test/lwt_server.{native,byte}>: package(lwt)
<lib_test/lwt_server.{native,byte}>: package(lwt.syntax)
<lib_test/lwt_server.{native,byte}>: package(lwt.unix)
<lib_test/lwt_server.{native,byte}>: package(re)
<lib_test/lwt_server.{native,byte}>: package(re.str)
<lib_test/lwt_server.{native,byte}>: use_dns
<lib_test/lwt_server.{native,byte}>: use_dns-lwt
<lib_test/lwt_server.{native,byte}>: use_dns-lwt-core
<lib_test/lwt_server.{native,byte}>: custom
# Executable time_server
<lib_test/time_server.{native,byte}>: package(cstruct)
<lib_test/time_server.{native,byte}>: package(cstruct.lwt)
<lib_test/time_server.{native,byte}>: package(cstruct.syntax)
<lib_test/time_server.{native,byte}>: package(io-page)
<lib_test/time_server.{native,byte}>: package(io-page.unix)
<lib_test/time_server.{native,byte}>: package(ipaddr)
<lib_test/time_server.{native,byte}>: package(ipaddr.unix)
<lib_test/time_server.{native,byte}>: package(lwt)
<lib_test/time_server.{native,byte}>: package(lwt.syntax)
<lib_test/time_server.{native,byte}>: package(lwt.unix)
<lib_test/time_server.{native,byte}>: package(re)
<lib_test/time_server.{native,byte}>: package(re.str)
<lib_test/time_server.{native,byte}>: use_dns
<lib_test/time_server.{native,byte}>: use_dns-lwt
<lib_test/time_server.{native,byte}>: use_dns-lwt-core
<lib_test/*.ml{,i}>: package(cstruct)
<lib_test/*.ml{,i}>: package(cstruct.lwt)
<lib_test/*.ml{,i}>: package(cstruct.syntax)
<lib_test/*.ml{,i}>: package(io-page)
<lib_test/*.ml{,i}>: package(io-page.unix)
<lib_test/*.ml{,i}>: package(ipaddr)
<lib_test/*.ml{,i}>: package(ipaddr.unix)
<lib_test/*.ml{,i}>: package(lwt)
<lib_test/*.ml{,i}>: package(lwt.syntax)
<lib_test/*.ml{,i}>: package(lwt.unix)
<lib_test/*.ml{,i}>: package(re)
<lib_test/*.ml{,i}>: package(re.str)
<lib_test/*.ml{,i}>: use_dns
<lib_test/*.ml{,i}>: use_dns-lwt
<lib_test/*.ml{,i}>: use_dns-lwt-core
<lib_test/time_server.{native,byte}>: custom
# Executable mldig
<lwt/mldig.{native,byte}>: package(cmdliner)
<lwt/mldig.{native,byte}>: package(cstruct)
<lwt/mldig.{native,byte}>: package(cstruct.lwt)
<lwt/mldig.{native,byte}>: package(cstruct.syntax)
<lwt/mldig.{native,byte}>: package(io-page)
<lwt/mldig.{native,byte}>: package(io-page.unix)
<lwt/mldig.{native,byte}>: package(ipaddr)
<lwt/mldig.{native,byte}>: package(ipaddr.unix)
<lwt/mldig.{native,byte}>: package(lwt)
<lwt/mldig.{native,byte}>: package(lwt.syntax)
<lwt/mldig.{native,byte}>: package(lwt.unix)
<lwt/mldig.{native,byte}>: package(re)
<lwt/mldig.{native,byte}>: package(re.str)
<lwt/mldig.{native,byte}>: use_dns
<lwt/mldig.{native,byte}>: use_dns-lwt
<lwt/mldig.{native,byte}>: use_dns-lwt-core
<lwt/*.ml{,i}>: package(cmdliner)
<lwt/*.ml{,i}>: package(cstruct)
<lwt/*.ml{,i}>: package(cstruct.lwt)
<lwt/*.ml{,i}>: package(cstruct.syntax)
<lwt/*.ml{,i}>: package(io-page)
<lwt/*.ml{,i}>: package(io-page.unix)
<lwt/*.ml{,i}>: package(ipaddr)
<lwt/*.ml{,i}>: package(ipaddr.unix)
<lwt/*.ml{,i}>: package(lwt)
<lwt/*.ml{,i}>: package(lwt.syntax)
<lwt/*.ml{,i}>: package(lwt.unix)
<lwt/*.ml{,i}>: package(re)
<lwt/*.ml{,i}>: package(re.str)
<lwt/*.ml{,i}>: use_dns
<lwt/*.ml{,i}>: use_dns-lwt
<lwt/*.ml{,i}>: use_dns-lwt-core
<lwt/mldig.{native,byte}>: custom
# OASIS_STOP
true: annot, bin_annot
<lib/*>: syntax_camlp4o, pkg_lwt.syntax
<lwt/*>: syntax_camlp4o, pkg_lwt.syntax
<mirage/*>: syntax_camlp4o, pkg_lwt.syntax
<lib_test/*>: syntax_camlp4o
<lib_test/*>: pkg_lwt.syntax
<client/*>: syntax_camlp4o, pkg_lwt.syntax
